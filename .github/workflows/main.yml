name: Main

on: push

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: cachix/install-nix-action@v31
      - uses: cachix/cachix-action@v16
        with:
          name: sestrella
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          skipPush: ${{ github.ref_name != 'main' }}
      - run: nix build

  template:
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: cachix/install-nix-action@v31
      - run: nix profile add nixpkgs#devenv
      - run: sed -i 's/github:sestrella\/auto-commit-msg/github:sestrella\/auto-commit-msg?ref=${{ github.sha }}/g' templates/default/devenv.yaml
      - run: echo "tmpdir=$(mktemp -d)" >> "$GITHUB_OUTPUT"
        id: mktemp
      - run: git init
        working-directory: ${{ steps.mktemp.outputs.tmpdir }}
      - run: nix flake init -t ${{ github.workspace }}
        working-directory: ${{ steps.mktemp.outputs.tmpdir }}
      - run: devenv test
        working-directory: ${{ steps.mktemp.outputs.tmpdir }}
      - run: cat .pre-commit-config.yaml
        working-directory: ${{ steps.mktemp.outputs.tmpdir }}

  binaries:
    runs-on: ubuntu-latest
    # needs: [build, template]
    strategy:
      matrix:
        goos:
          - darwin
          - linux
        goarch:
          - amd64
          - arm64
      fail-fast: true
    env:
      NAME_PREFIX: autocommitmsg-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
      - run: go build -o $NAME_PREFIX/autocommitmsg
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
      - run: cp LICENSE $NAME_PREFIX/
      - run: zip -r $NAME_PREFIX.zip $NAME_PREFIX
      - uses: actions/upload-artifact@v4
        with:
          path: $NAME_PREFIX.zip

  draft-release:
    runs-on: ubuntu-latest
    needs: [binaries]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
      - uses: actions/download-artifact@v5
      - uses: softprops/action-gh-release@v2
        with:
          draft: true
          generate_release_notes: true
          files: |
            *.zip
            LICENSE

